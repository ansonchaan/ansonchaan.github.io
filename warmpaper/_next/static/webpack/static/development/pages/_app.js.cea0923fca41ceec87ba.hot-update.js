webpackHotUpdate("static/development/pages/_app.js",{

/***/ "./src/globalFunc.js":
/*!***************************!*\
  !*** ./src/globalFunc.js ***!
  \***************************/
/*! exports provided: print, adjustFontSize, getDevice, SmoothScroll, usePrevious */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"print\", function() { return print; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adjustFontSize\", function() { return adjustFontSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDevice\", function() { return getDevice; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SmoothScroll\", function() { return SmoothScroll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"usePrevious\", function() { return usePrevious; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _s = $RefreshSig$();\n\n //\n//\tstyling console.log\n//\n\nvar print = function print(state, color, text) {\n  if (true) {\n    var msg = typeof text == 'object' ? JSON.stringify(text) : text || '';\n    console.log('%c' + state + '%c %s', 'color:white;font-family:sans-serif;font-size:10px;font-weight:bold;background:' + color + ';padding:4px 6px 3px 5px;border-radius:3px;', '', msg);\n  }\n}; //\n// enlarge font size on large screen\n//\n\nvar adjustFontSize = function adjustFontSize() {\n  var baseFontRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 14 / 1024;\n  var fontMultiplier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.84375;\n  var width = window.innerWidth;\n  var roundedNumber = Math.round(baseFontRatio * width * fontMultiplier);\n  if (roundedNumber >= 16) // if(!isMobile())\n    document.documentElement.style.fontSize = roundedNumber + \"px\";else document.documentElement.style.fontSize = \"\";\n}; //\n// get device type\n//\n\nvar getDevice = function getDevice() {\n  try {\n    var w = window,\n        d = document,\n        documentElement = d.documentElement,\n        body = d.getElementsByTagName(\"body\")[0];\n    var width = w.innerWidth || documentElement.clientWidth || body.clientWidth;\n    var deviceType = \"\";\n\n    (function (a) {\n      if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(a.substr(0, 4))) {\n        if (width > 700) deviceType = \"tablet\";else deviceType = \"mobile\";\n      } else deviceType = \"desktop\";\n    })(navigator.userAgent || navigator.vendor || window.opera);\n\n    return deviceType;\n  } catch (e) {\n    return \"desktop\";\n  }\n};\n\nvar isMobile = function isMobile() {\n  return window.innerWidth <= 1024;\n};\n\nvar hasClass = function hasClass(el, className) {\n  if (el.classList) return el.classList.contains(className);else return !!el.className.match(new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\"));\n};\n\nvar addClass = function addClass(el, className) {\n  if (el.classList) el.classList.add(className);else if (!hasClass(el, className)) el.className += \" \" + className;\n};\n\nvar removeClass = function removeClass(el, className) {\n  var isNodelist = typeof el.length != \"undefined\" && typeof el.item != \"undefined\";\n\n  if (isNodelist) {\n    var els = el;\n\n    for (var i = 0; els[i]; i++) {\n      if (els[i].classList) els[i].classList.remove(className);else if (hasClass(els[i], className)) {\n        var reg = new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n        els[i].className = els[i].className.replace(reg, \" \");\n      }\n    }\n  } else {\n    if (el.classList) el.classList.remove(className);else if (hasClass(el, className)) {\n      var _reg = new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n\n      el.className = el.className.replace(_reg, \" \");\n    }\n  }\n}; //\n// Add and Remove Event\n//\n\n\nvar addEvent = function addEvent(obj, type, callback) {\n  if (obj === null || typeof obj === \"undefined\") return;\n  if (obj.addEventListener) obj.addEventListener(type, callback, false);else if (obj.attachEvent) obj.attachEvent(\"on\" + type, callback);else obj[\"on\" + type] = callback;\n};\n\nvar removeEvent = function removeEvent(obj, type, func) {\n  if (obj.removeEventListener) obj.removeEventListener(type, func, false);\n};\n\nvar setTranslate = function setTranslate(elem, x, y, z) {\n  elem.style.webkitTransform = \"translate3d(\" + x + \",\" + y + \",\" + z + \")\";\n  elem.style.msTransform = \"translate3d(\" + x + \",\" + y + \",\" + z + \")\";\n  elem.style.transform = \"translate3d(\" + x + \",\" + y + \",\" + z + \")\";\n};\n\nvar FrameImpulse = function FrameImpulse() {\n  var vendors = [\"webkit\", \"moz\"];\n  var r = {};\n  var listeners = [],\n      numListeners = 0,\n      toRemove = [],\n      numToRemove;\n  var lastTime = 0;\n\n  for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {\n    window.requestAnimationFrame = window[vendors[i] + \"RequestAnimationFrame\"];\n  }\n\n  if (!window.requestAnimationFrame) {\n    window.requestAnimationFrame = function (callback) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = window.setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n\n  var run = function run(deltaTime) {\n    requestAnimationFrame(run);\n    if (numListeners === 0) return;\n\n    for (var i = 0; i < numListeners; i++) {\n      listeners[i].call(deltaTime);\n    }\n\n    if (numToRemove > 0) {\n      var indexToRemove = [];\n\n      for (var _i = listeners.length - 1; _i >= 0; _i--) {\n        for (var j = 0; j < toRemove.length; j++) {\n          if (listeners[_i] === toRemove[j]) indexToRemove.push(_i);\n        }\n      }\n\n      for (var _i2 = 0; _i2 < indexToRemove.length; _i2++) {\n        listeners.splice(indexToRemove[_i2], 1);\n      }\n\n      numListeners = listeners.length;\n      toRemove = [];\n      numToRemove = 0;\n    }\n  };\n\n  r.on = function (f) {\n    document.body.scrollTo(0, 0);\n\n    if (listeners.indexOf(f) > -1) {\n      return;\n    }\n\n    listeners.push(f);\n    numListeners = listeners.length; // console.log(\"FrameImpulse > new listener > total :\", numListeners);\n  };\n\n  r.off = function (f) {\n    //toRemove.push(f);\n    //numToRemove = toRemove.length;\n    var i = listeners.indexOf(f);\n    if (i === -1) return;\n    listeners.splice(i, 1);\n    numListeners = listeners.length; // console.log(\"FrameImpulse > scheduled removal > total :\", numListeners);\n  };\n\n  r.getListeners = function () {\n    return listeners;\n  };\n\n  run();\n  return r;\n};\n\n_c = FrameImpulse;\n\nvar VirtualScroll = function VirtualScroll() {\n  var vs = {};\n  var numListeners,\n      listeners = [],\n      initialized = false;\n  var touchStartX, touchStartY; // [ These settings can be customized with the options() function below ]\n  // Mutiply the touch action by two making the scroll a bit faster than finger movement\n\n  var touchMult = 2; // Firefox on Windows needs a boost, since scrolling is very slow\n\n  var firefoxMult = 15; // How many pixels to move with each key press\n\n  var keyStep = 120; // General multiplier for all mousehweel including FF\n\n  var mouseMult = 1;\n  var bodyTouchAction;\n  var hasWheelEvent = (\"onwheel\" in document);\n  var hasMouseWheelEvent = (\"onmousewheel\" in document);\n  var hasTouch = (\"ontouchstart\" in document);\n  var hasKeyDown = (\"onkeydown\" in document);\n  var hasTouchWin = navigator.msMaxTouchPoints && navigator.msMaxTouchPoints > 1;\n  var hasPointer = !!window.navigator.msPointerEnabled;\n  var isFirefox = navigator.userAgent.indexOf(\"Firefox\") > -1;\n  var event = {\n    y: 0,\n    x: 0,\n    deltaX: 0,\n    deltaY: 0,\n    originalEvent: null\n  };\n  var k = {\n    left: 37,\n    right: 39,\n    up: 38,\n    down: 40\n  };\n\n  vs.on = function (f) {\n    if (!initialized) initListeners();\n    var i = listeners.indexOf(f);\n    if (i !== -1) return;\n    listeners.push(f);\n    numListeners = listeners.length;\n  };\n  /**\n   *\t@method options\n   *\t@memberof VirtualScroll\n   *\t@static\n   *\n   *\t@param {Object} opt - object literal containing one or more options from the list above, specified as properties.\n   *\n   *\t@description Sets custom parameters to the VirtualScroll (globally). The following options are supported:\n   *\n   *\t<ul>\n   *\t<li>touchMult (default: 2) - mutiply the touch action to make the scroll a faster/slower than finger movement</li>\n   *\t<li>firefoxMult (defailt: 15)- Firefox on Windows needs a boost, since scrolling is very slow</li>\n   *\t<li>keyStep (default: 120) - specified how many pixels to move with each key press</li>\n   *\t<li>mouseMult (default: 1) - general multiplier for all mousehweel events including FF</li>\n   *\t</ul>\n   */\n\n\n  vs.options = function (opt) {\n    keyStep = opt.keyStep || 120;\n    firefoxMult = opt.firefoxMult || 15;\n    touchMult = opt.touchMult || 2;\n    mouseMult = opt.mouseMult || 1;\n  };\n\n  vs.off = function (f) {\n    var i = listeners.indexOf(f);\n    if (i === -1) return;\n    listeners.splice(i, 1);\n    numListeners = listeners.length;\n    if (numListeners <= 0) destroyListeners();\n  };\n  /**\n   *\t@method lockTouch\n   *\t@memberof VirtualScroll\n   *\t@static\n   *\n   *\t@description For VirtualScroll to work on mobile, the default swipe-to-scroll behavior needs to be turned off.\n   *\tThis function will take care of that, however it's a failt simple mechanism - see in the source code, linked below.\n   */\n\n\n  vs.lockTouch = function () {\n    document.addEventListener(\"touchmove\", function (e) {\n      e.preventDefault();\n    });\n  };\n\n  var notify = function notify(e) {\n    event.x += event.deltaX;\n    event.y += event.deltaY;\n    event.originalEvent = e;\n\n    for (var i = 0; i < numListeners; i++) {\n      listeners[i](event);\n    }\n  };\n\n  var onWheel = function onWheel(e) {\n    // In Chrome and in Firefox (at least the new one)\n    event.deltaX = e.wheelDeltaX || e.deltaX || (e.wheelDeltaY || e.deltaY) * -1;\n    event.deltaY = e.wheelDeltaY || e.deltaY * -1; // for our purpose deltamode = 1 means user is on a wheel mouse, not touch pad\n    // real meaning: https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent#Delta_modes\n\n    if (isFirefox && e.deltaMode === 1) {\n      event.deltaX *= firefoxMult;\n      event.deltaY *= firefoxMult;\n    }\n\n    event.deltaX *= mouseMult;\n    event.deltaY *= mouseMult;\n    notify(e);\n  };\n\n  var onMouseWheel = function onMouseWheel(e) {\n    // In Safari, IE and in Chrome if 'wheel' isn't defined\n    event.deltaX = e.wheelDeltaX ? e.wheelDeltaX : 0;\n    event.deltaY = e.wheelDeltaY ? e.wheelDeltaY : e.wheelDelta;\n    notify(e);\n  };\n\n  var onTouchStart = function onTouchStart(e) {\n    var t = e.targetTouches ? e.targetTouches[0] : e;\n    touchStartX = t.pageX;\n    touchStartY = t.pageY;\n  };\n\n  var onTouchMove = function onTouchMove(e) {\n    // e.preventDefault(); // < This needs to be managed externally\n    var t = e.targetTouches ? e.targetTouches[0] : e;\n    event.deltaX = (t.pageX - touchStartX) * touchMult;\n    event.deltaY = (t.pageY - touchStartY) * touchMult;\n    touchStartX = t.pageX;\n    touchStartY = t.pageY;\n    notify(e);\n  };\n\n  var onKeyDown = function onKeyDown(e) {\n    // 37 left arrow, 38 up arrow, 39 right arrow, 40 down arrow\n    event.deltaX = event.deltaY = 0;\n\n    switch (e.keyCode) {\n      case k.left:\n        event.deltaX = -keyStep;\n        break;\n\n      case k.right:\n        event.deltaX = keyStep;\n        break;\n\n      case k.up:\n        event.deltaY = keyStep;\n        break;\n\n      case k.down:\n        event.deltaY = -keyStep;\n        break;\n    }\n\n    notify(e);\n  };\n\n  var initListeners = function initListeners() {\n    if (hasWheelEvent) document.addEventListener(\"wheel\", onWheel);\n    if (hasMouseWheelEvent) document.addEventListener(\"mousewheel\", onMouseWheel); // if (hasTouch) {\n\n    document.addEventListener(\"touchstart\", onTouchStart);\n    document.addEventListener(\"touchmove\", onTouchMove); // }\n\n    if (hasPointer && hasTouchWin) {\n      bodyTouchAction = document.body.style.msTouchAction;\n      document.body.style.msTouchAction = \"none\";\n      document.addEventListener(\"MSPointerDown\", onTouchStart, true);\n      document.addEventListener(\"MSPointerMove\", onTouchMove, true);\n    }\n\n    if (hasKeyDown) document.addEventListener(\"keydown\", onKeyDown);\n    initialized = true;\n  };\n\n  var destroyListeners = function destroyListeners() {\n    if (hasWheelEvent) document.removeEventListener(\"wheel\", onWheel);\n    if (hasMouseWheelEvent) document.removeEventListener(\"mousewheel\", onMouseWheel); // if (hasTouch) {\n\n    document.removeEventListener(\"touchstart\", onTouchStart);\n    document.removeEventListener(\"touchmove\", onTouchMove); // }\n\n    if (hasPointer && hasTouchWin) {\n      document.body.style.msTouchAction = bodyTouchAction;\n      document.removeEventListener(\"MSPointerDown\", onTouchStart, true);\n      document.removeEventListener(\"MSPointerMove\", onTouchMove, true);\n    }\n\n    if (hasKeyDown) document.removeEventListener(\"keydown\", onKeyDown);\n    initialized = false;\n  };\n\n  return vs;\n}; //\n//  Virtual Scroll\n//\n\n\n_c2 = VirtualScroll;\nvar SmoothScroll = function SmoothScroll(elem, scrollFunc) {\n  var _this = this; // Grab both red boxes\n\n\n  this.elem = elem; // Check how much we can scroll. This value is the\n  // height of the scrollable element minus the height of the widow\n\n  var fullElemHeight = this.elem.getBoundingClientRect().height;\n  var parentHeight = this.elem.parentNode.offsetHeight;\n  var elemWidth; // = this.elem.getBoundingClientRect().width - this.elem.;\n\n  var elemHeight; // = this.elem.getBoundingClientRect().height - window.innerHeight;\n  // Add easing to the scroll. Play with this value to find a setting that you like.\n\n  var ease = 0.1;\n  var mult = 0.7; // Store current scroll position\n\n  var targetX = 0,\n      targetY = 0;\n  var currentX = 0,\n      currentY = 0;\n  var showScrollBar = false;\n  var disable = false;\n  var isSelf = true;\n\n  var onScroll = function onScroll(e) {\n    if (!disable && isSelf) {\n      // Accumulate delta value on each scroll event\n      targetY += e.deltaY * mult;\n      targetX += e.deltaX * mult; // Clamp the value so it doesn't go too far up or down\n      // The value needs to be between 0 and -elemHeight\n\n      targetX = Math.max(-elemWidth, targetX);\n      targetX = Math.min(0, targetX);\n      targetY = Math.max(-elemHeight, targetY);\n      targetY = Math.min(0, targetY);\n    }\n  };\n\n  var onAnim = function onAnim() {\n    // Make sure this works across different browsers (use the shim or something)\n    // keep at bottom while resizing\n    if (-targetX > elemWidth && targetX < 0) targetX = -elemWidth + 1;\n    if (-targetY > elemHeight && targetY < 0) targetY = -elemHeight + 1;\n    if (_this.elem.getBoundingClientRect().height < _this.elem.parentNode.offsetHeight) targetY = 0; // Get closer to the target value at each frame, using ease.\n    // Other easing methods are also ok.\n\n    currentX += (targetX - currentX) * ease;\n    currentY += (targetY - currentY) * ease; // Uncomment this line to scroll horizontally\n    // currentX += (targetX - currentX) * ease;\n    // Apply CSS style\n\n    setTranslate(_this.elem, currentX.toFixed(4) + \"px\", currentY.toFixed(4) + \"px\", 0 + \"px\");\n    refresh();\n    if (scrollFunc) scrollFunc(currentY / elemHeight, currentY, elemHeight);\n    if (showScrollBar) if (fullElemHeight > _this.elem.parentNode.offsetHeight) rePositionScrollBar(currentY); // lazyLoad.checkAndShowImg();\n  }; // detect that if hovered scroll container\n\n\n  addEvent(_this.elem, \"mouseenter\", function () {\n    isSelf = true;\n  });\n  addEvent(_this.elem, \"mouseleave\", function () {\n    isSelf = false;\n  });\n  addEvent(_this.elem, \"touchstart\", function () {\n    isSelf = true;\n  });\n  addEvent(_this.elem, \"touchend\", function () {\n    isSelf = false;\n  });\n\n  var initScrollBar = function initScrollBar() {\n    _this.oldMouseY = 0;\n    _this.scrollBarOuterWrap = document.createElement(\"div\");\n    _this.scrollBarWrap = document.createElement(\"div\");\n    _this.scrollBar = document.createElement(\"div\");\n\n    _this.scrollBarOuterWrap.setAttribute(\"id\", \"scrollBarOuterWrap\");\n\n    _this.scrollBarWrap.setAttribute(\"id\", \"scrollBarWrap\");\n\n    _this.scrollBar.setAttribute(\"id\", \"scrollBar\");\n\n    addEvent(_this.scrollBar, \"mousedown\", onMouseDownScrollBar);\n\n    _this.scrollBarWrap.appendChild(_this.scrollBar);\n\n    _this.scrollBarOuterWrap.appendChild(_this.scrollBarWrap);\n\n    _this.elem.parentNode.appendChild(_this.scrollBarOuterWrap);\n  };\n\n  var rePositionScrollBar = function rePositionScrollBar(y) {\n    var scrollBarHeight = (1 - elemHeight / fullElemHeight) * 100;\n    _this.scrollBar.style.height = scrollBarHeight + \"%\";\n    _this.scrollBarY = (_this.scrollBarWrap.offsetHeight - _this.scrollBar.offsetHeight) * (y / elemHeight);\n    setTranslate(_this.scrollBar, '-50%', -_this.scrollBarY.toFixed(4) + \"px\", 0 + \"px\");\n  };\n\n  var onMouseDownScrollBar = function onMouseDownScrollBar(e) {\n    e.preventDefault();\n    _this.oldMouseY = e.pageY;\n    _this.clickedScrollBar = true;\n    addClass(this, \"active\");\n    addEvent(document, \"mousemove\", onMoveScrollBar);\n    addEvent(document, \"mouseup\", onMouseUpScrollBar);\n  };\n\n  var onMoveScrollBar = function onMoveScrollBar(e) {\n    if (_this.clickedScrollBar) {\n      var y = _this.oldMouseY - e.pageY;\n      targetY += y * (fullElemHeight / _this.elem.parentNode.offsetHeight);\n      targetY = Math.max(-elemHeight, targetY);\n      targetY = Math.min(0, targetY);\n      _this.oldMouseY = e.pageY;\n    }\n  };\n\n  var onMouseUpScrollBar = function onMouseUpScrollBar() {\n    _this.clickedScrollBar = false;\n    removeClass(_this.scrollBar, \"active\");\n    removeEvent(document, \"mousemove\", onMoveScrollBar);\n    removeEvent(document, \"mouseup\", onMouseUpScrollBar);\n  };\n\n  var reset = function reset() {\n    currentY = 0;\n    targetY = 0;\n  };\n\n  var refresh = function refresh() {\n    if (_this.elem.parentNode != null) {\n      fullElemHeight = _this.elem.getBoundingClientRect().height;\n      elemWidth = _this.elem.getBoundingClientRect().width - _this.elem.parentNode.offsetWidth;\n      elemHeight = _this.elem.getBoundingClientRect().height - _this.elem.parentNode.offsetHeight;\n\n      if (showScrollBar) {\n        if (fullElemHeight > parentHeight) {\n          if (hasClass(_this.scrollBarOuterWrap, \"hide\")) removeClass(_this.scrollBarOuterWrap, \"hide\");\n        } else {\n          if (!hasClass(_this.scrollBarOuterWrap, \"hide\")) addClass(_this.scrollBarOuterWrap, \"hide\");\n        }\n      }\n    }\n  };\n\n  var to = function to(y) {\n    elemHeight = _this.elem.getBoundingClientRect().height - _this.elem.parentNode.offsetHeight;\n    targetY = Math.max(-elemHeight, y);\n  };\n\n  var set = function set(y) {\n    currentY = y;\n    targetY = y;\n  };\n\n  var vs = VirtualScroll();\n  var fi = FrameImpulse();\n  var isOn = false;\n\n  var on = function on() {\n    isOn = true;\n    refresh();\n    onResize();\n    initScrollBar();\n    onShowScrollBar();\n    vs.on(onScroll);\n    fi.on(onAnim);\n  };\n\n  var off = function off() {\n    isOn = false;\n    vs.off(onScroll);\n    fi.off(onAnim);\n    onHideScrollBar();\n    destroy();\n  };\n\n  var destroy = function destroy() {\n    // removeEvent(window, \"resize\", onResize);\n    if (_this.scrollBarOuterWrap) {\n      removeEvent(_this.scrollBar, \"mousedown\", onMouseDownScrollBar);\n\n      _this.scrollBarOuterWrap.remove();\n\n      _this.scrollBarOuterWrap = null;\n      _this.scrollBarWrap = null;\n      _this.scrollBar = null;\n    }\n  };\n\n  var onResize = function onResize() {\n    parentHeight = _this.elem.parentNode.offsetHeight;\n\n    if (isMobile()) {\n      if (isOn) {\n        off();\n        setTranslate(_this.elem, 0 + \"px\", 0 + \"px\", 0 + \"px\");\n      }\n    } else {\n      if (!isOn) {\n        initScrollBar();\n        on();\n      }\n\n      if (disable) onEnable();\n    }\n  };\n\n  var onDisable = function onDisable() {\n    disable = true;\n  };\n\n  var onEnable = function onEnable() {\n    disable = false;\n  };\n\n  var onShowScrollBar = function onShowScrollBar() {\n    showScrollBar = true;\n    removeClass(_this.scrollBarWrap, 'hide');\n  };\n\n  var onHideScrollBar = function onHideScrollBar() {\n    showScrollBar = false;\n    if (_this.scrollBarWrap) addClass(_this.scrollBarWrap, 'hide');\n  };\n\n  var init = function init() {\n    if (!isMobile()) {\n      on();\n    }\n\n    addEvent(window, \"resize\", onResize);\n  };\n\n  init();\n  return {\n    reset: reset,\n    refresh: refresh,\n    onResize: onResize,\n    set: set,\n    to: to,\n    on: on,\n    off: off,\n    disable: onDisable,\n    enable: onEnable,\n    showScrollBar: onShowScrollBar,\n    hideScrollBar: onHideScrollBar,\n    destroy: destroy\n  };\n};\n_c3 = SmoothScroll;\nvar usePrevious = function usePrevious(value) {\n  _s();\n\n  var ref = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\n_s(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"FrameImpulse\");\n$RefreshReg$(_c2, \"VirtualScroll\");\n$RefreshReg$(_c3, \"SmoothScroll\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/globalFunc.js\n");

/***/ })

})